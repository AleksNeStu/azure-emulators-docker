services:

  # Azure Cosmos DB Emulator (MongoDB API mode)
  cosmosdb:
    container_name: cosmosdb-emulator
    image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
    mem_limit: 3g
    deploy:
      resources:
        limits:
          memory: 3g
    cpu_count: 2
    environment:
      - AZURE_COSMOS_EMULATOR_PARTITION_COUNT=10
      - AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE=true
      - AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE=127.0.0.1
    ports:
      - "8081:8081"      # Emulator portal
      - "10250-10255:10250-10255" # MongoDB API
      - "443:443"        # HTTPS access
    volumes:
      - ./volumes/cosmos_db:/cosmos/data
      - cosmosdb_cert:/cosmos/cert
    networks:
      - azure-network
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    tty: true
    stdin_open: true

  # Azurite (Azure Blob Storage Emulator)
  azurite:
    container_name: azurite-emulator
    image: mcr.microsoft.com/azure-storage/azurite
    command: "azurite --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0 --loose"
    ports:
      - "10000:10000"  # Blob service
      - "10001:10001"  # Queue service
      - "10002:10002"  # Table service
    volumes:
      - ./volumes/blob:/data
    networks:
      - azure-network

  # Azure Service Bus Emulator
  servicebus:
    container_name: servicebus-emulator
    image: mcr.microsoft.com/azure-service-bus/emulator:latest
    ports:
      - "5672:5672"  # AMQP port
      - "9354:9354"  # Management port
    volumes:
      - ./volumes/servicebus:/var/opt/servicebus
    networks:
      - azure-network

  # Azure Functions Core Tools Emulator
  azurefunctions:
    container_name: azure-functions-emulator
    image: mcr.microsoft.com/azure-functions/dotnet:4
    ports:
      - "7071:7071"  # Functions runtime port
    volumes:
      - ./functions:/home/site/wwwroot
      - ./volumes/functions:/home/LogFiles
    networks:
      - azure-network
    environment:
      - APPLICATIONINSIGHTS_CONNECTION_STRING=InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=http://appinsights-mock:8080/;LiveEndpoint=http://appinsights-mock:8080/
      - APPINSIGHTS_INSTRUMENTATIONKEY=00000000-0000-0000-0000-000000000000
      - APPLICATIONINSIGHTS_DISABLE_EXTENDED_METRIC=true
      - APPINSIGHTS_ENDPOINTURL=http://appinsights-mock:8080/
      - APPLICATIONINSIGHTS_DISABLE_TELEMETRY=false
      - APPLICATIONINSIGHTS_ENABLE_LOCAL_FORWARDING=true
      - APPLICATIONINSIGHTS_DISABLE_INTERNET_ACCESS=true
      # Add these new environment variables to force local routing
      - ApplicationInsights__ConnectionString=InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=http://appinsights-mock:8080/;LiveEndpoint=http://appinsights-mock:8080/
      - APPLICATIONINSIGHTS_TOEVENTSJSON=true
      - WEBSITE_HOSTNAME=localhost
      - AzureWebJobsStorage=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;
    depends_on:
      - appinsights-mock
      - azurite

  # Application Insights Mock Service
  appinsights-mock:
    container_name: appinsights-mock
    image: nginx:alpine
    ports:
      - "8080:8080"
    volumes:
      - ./volumes/appinsights-mock:/usr/share/nginx/html
    networks:
      - azure-network
    command: >
      sh -c "mkdir -p /var/log/nginx && echo 'server { 
        listen 8080; 
        access_log /var/log/nginx/appinsights.log;
        location / { 
          add_header Content-Type application/json;
          return 200 \"{\\\"itemsReceived\\\":1,\\\"itemsAccepted\\\":1,\\\"errors\\\":[]}\"; 
        }
        location /v2/track { 
          add_header Content-Type application/json;
          return 200 \"{\\\"itemsReceived\\\":1,\\\"itemsAccepted\\\":1,\\\"errors\\\":[]}\"; 
        }
      }' > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

networks:
  azure-network:
    driver: bridge

volumes:
  cosmosdb_cert:
